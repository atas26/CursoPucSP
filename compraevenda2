pragma solidity 0.8.9; 

contract CompraeVenda {
    string nomeVendedor;
    string nomeComprador;
    string public matricula;
    string public cartorio;
    string dataDeVencimento;
    bool quitado = false;
    uint public valorTotal = 10000;
    uint public valorDaEntrada = 4000;
    uint public valorEmAberto;
    uint public valorDaParcela;
    uint public quantidadeDeParcelas = 6;
    uint public porcetagemDaMulta = 20;
    
    constructor(
        uint _valorTotal,
        uint _valorDaEntrada,
        uint _quantidadeDeParcelas,
        string memory _matricula,
        string memory _cartorio
        ) 
    {
          valorTotal = _valorTotal;
          valorDaEntrada = _valorDaEntrada;
          quantidadeDeParcelas = _quantidadeDeParcelas;
          matricula = _matricula;
          cartorio = _cartorio;
          valorEmAberto = valorTotal;
          valorDaParcela = valorParcela();
          
        }
        function pagarEntrada (uint _valorPagamento) public returns (uint, string memory) {
            valorDaEntrada = _valorPagamento;
            valorEmAberto = valorTotal - _valorPagamento;
            return(valorEmAberto, "valor em aberto");
            
        }   
        
        function pagarParcela (uint _valorDaParcela) public returns (uint, string memory) {
            valorEmAberto = valorEmAberto - _valorDaParcela;
            return(valorEmAberto, "valor em aberto");
        }
        
        function valorParcela() public view returns (uint) {
            uint calculoValorParcela = (valorTotal-valorDaEntrada)/quantidadeDeParcelas;    
            return(calculoValorParcela);
        }   
            
        function valorMulta(uint _porcetagemDaMulta) public view returns (uint, string memory) {
           // uint multa = (_porcetagemDaMulta/100)*valorTotal;
            uint multa = _porcetagemDaMulta*valorTotal/100;
            return(multa, "valorMulta");
            
        }
            
}
